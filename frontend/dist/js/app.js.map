{"version":3,"sources":["../deps/node_modules/browser-pack/_prelude.js","src/client.js","src/components/DevTools.js","src/components/Home.js","src/components/MarkdownEditor.js","src/components/NoteEdit.js","src/components/NoteNew.js","src/components/NotebookEdit.js","src/components/NotebookList.js","src/components/NotebookNew.js","src/components/Root.js","src/helpers/ajax.js","src/helpers/api.js","src/helpers/createActionDispatchers.js","src/helpers/createStore.js","src/reducers/index.js","src/reducers/notebooks.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n * This is the entry point for the JavaScript application which runs in the\n * web browser. We call `window.main` when the page loads, and use that\n * opportunity to create the Redux store and mount the root React component.\n */\n\nconst React = require('react');\nconst ReactDOM = require('react-dom');\n\nconst createStore = require('./helpers/createStore');\nconst Root = React.createFactory(require('./components/Root'));\n\n// Initialisation function which we will call on page load\nwindow.main = (initialState) => {\n  // Create root React component with Redux store\n  const store = createStore(initialState);\n  const rootComponent = Root({ store });\n\n  // Mount React root component in DOM\n  const mountPoint = document.getElementById('root');\n  ReactDOM.render(rootComponent, mountPoint);\n};\n","const React = require('react');\nconst ReduxDevtools = require('redux-devtools');\nconst DockMonitor = require('redux-devtools-dock-monitor').default;\nconst LogMonitor = require('redux-devtools-log-monitor').default;\n\nconst InternalDevTools = ReduxDevtools.createDevTools(\n  <DockMonitor toggleVisibilityKey=\"h\" changePositionKey=\"q\" defaultIsVisible={false}>\n    <LogMonitor />\n  </DockMonitor>\n);\n\nclass DevTools extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isMounted: false };\n  }\n\n  static instrument(...args) {\n    return InternalDevTools.instrument(...args);\n  }\n\n  componentDidMount() {\n    this.setState({ isMounted: true });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.isMounted && <InternalDevTools />}\n      </div>\n    );\n  }\n}\n\n/**\n * Redux development tools (useful for debugging).\n */\nmodule.exports = DevTools;\n","/**\n * This file contains the Home component.\n * Other React components for viewing notes and notebooks should be nested\n * beneath the Home component.\n */\n\nconst React = require('react');\n\nconst NotebookList = require('./NotebookList');\n\n//We start building the frontend from here\n//We call the NotebookList which further calls other requried components\nconst Home = () => (\n  <div className=\"container\">\n    <h1>Neverwrote</h1>\n    <blockquote>\n      Never say \"I never wrote that down\" ever again!\n    </blockquote>\n    <NotebookList />\n  </div>\n);\n\n//We export our Home Component\nmodule.exports = Home;\n","const React = require('react');\n\n//This is the MarkDownEditor\nclass MarkdownEditor extends React.Component {\n  componentDidMount() {\n    // SimpleMDE must be required here since it's browser-only.\n    const SimpleMDE = require('simplemde');\n\n    // Turn our plain old text area into a beautiful markdown editor\n    this.simpleMDE = new SimpleMDE({\n      indentWithTabs: false,\n      status: false,\n      autoDownloadFontAwesome: false,\n      element: this.textarea\n    });\n\n    // Put initial text in the editor\n    this.simpleMDE.value(this.props.value);\n\n    // Listen for changes and fire a callback\n    this.simpleMDE.codemirror.on('change', () => {\n      const newText = this.simpleMDE.value();\n      if(newText !== this.props.value) {\n        this.props.onChange({ target: { value: newText } });\n      }\n    });\n  }\n\n  componentDidUpdate() {\n    // Replace the text in the editor, preserving the cursor position and\n    // selection info\n    const selections = this.simpleMDE.codemirror.listSelections();\n    this.simpleMDE.value(this.props.value);\n    this.simpleMDE.codemirror.setSelections(selections);\n  }\n\n  // Describe how to render the component\n  render() {\n    const ref = (element) => { this.textarea = element; };\n    return (\n      <textarea ref={ref} />\n    );\n  }\n}\n\n// Export the component so that it can be required\nmodule.exports = MarkdownEditor;\n","const React = require('react');\nconst _ = require('lodash');\nconst MarkdownEditor = require('./MarkdownEditor');\n\nclass NoteEdit extends React.Component {\n  constructor(props) {\n    super(props);\n    const note = props.note || {};\n\n    this.state = {\n      title: note.title || '',\n      content: note.content || '',\n      notebookId: props.notebookId || ''\n    };\n  }\n\n  render() {\n    const revertAndStopEditing = (event) => {\n      event.preventDefault();\n      this.props.onCancel();\n    };\n\n    const submitAndStopEditing = (event) => {\n      event.preventDefault();\n      const editedPost = _.assign({}, this.props.note, {\n        title: this.state.title,\n        content: this.state.content,\n        notebookId: this.props.notebookId\n      });\n\n      console.log('edited post');\n      console.table(editedPost);\n      this.props.onSave(editedPost);\n      this.props.onCancel();\n    };\n\n    const onTitleChange = (event) => {\n      this.setState({title: event.target.value});\n\n    };\n\n    const onContentChange = (event) => {\n      this.setState({content: event.target.value});\n    };\n\n    return(\n      <form className=\"blog-post\">\n\n        <div className=\"form-group\">\n          <input className=\"form-control input-lg\" value={this.state.title}\n            placeholder=\"Note title\" onChange={onTitleChange}\n            />\n          <MarkdownEditor value={this.state.content} onChange={onContentChange} />\n        </div>\n\n        <button className=\"ButnN btn btn-danger pull-right btn-lg\"\n          style={{marginRight: '12px'}}\n          onClick={revertAndStopEditing}\n        >\n          <i className=\"fa fa-remove\"></i>\n        </button>\n\n        <button className=\"ButnN btn btn-success pull-right btn-lg\"\n        onClick={submitAndStopEditing}\n        >\n          <i className=\"fa fa-check\"></i>\n        </button>\n\n    </form>\n    );\n  }\n}\n\nmodule.exports = NoteEdit;","const React = require('react');\nconst MarkdownEditor = require('./MarkdownEditor');\nconst NoteEdit = require('./NoteEdit');\n\nclass NoteNew extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editing:false,\n\n    };\n  }\n\n  render() {\n    const openEdit = () => {\n      this.setState({editing:true});\n    };\n\n    const closeEdit = () => {\n      this.setState({editing:false});\n      console.log('Calling...');\n      this.props.clearInput();\n\n    }\n\n    const createNote = (newNote) => {\n      this.props.createNote(newNote, (err) => {\n        if(!err) closeEdit();\n      })\n      console.log('this is supposed to show up after the first table');\n    };\n\n    if(this.state.editing) {\n\n      return (\n        <NoteEdit\n          note={this.props.note}\n          onSave={createNote}\n          onCancel={closeEdit}\n          notebookId={this.props.notebookId}\n        />\n      );\n    }\n\n    return (\n      <button className=\"new-note btn btn-primary\"\n        onClick={openEdit}\n      >\n      <i className=\"new-notebook-button-plus fa fa-plus\"></i>\n      Note\n      </button>\n    );\n  }\n}\n\nmodule.exports = NoteNew;","const React = require('react');\nconst _ = require('lodash');\n\nclass NotebookEdit extends React.Component {\n  constructor(props) {\n    super(props);\n    const notebook = props.notebook || {};\n    this.state = {\n      title: notebook.title || '',\n    };\n  }\n\n  render() {\n    const revertAndStopEditing = (event) => {\n      event.preventDefault();\n      this.props.onCancel();\n    };\n\n    const submitAndStopEditing = (event) => {\n\n      event.preventDefault();\n      //Creates a new Notebook object and saves it.\n      const editedNotebook = _.assign({},this.props.notebook, {\n        title: this.state.title\n      });\n      this.props.onSave(editedNotebook);\n      this.props.onCancel();\n    };\n\n    const onTitleChange = (event) => {\n      this.setState({title:event.target.value});\n    };\n\n    return (\n        <div className=\"NotebookInput\">\n          <div className=\"input-group\">\n\n            <input className=\"form-control input-lg\" value={this.state.title}\n            placeholder=\"Notebook title\" onChange={onTitleChange}\n            />\n\n            <div className=\"input-group-btn\">\n\n              <button className=\"btn btn-success btn-lg\"\n                onClick={submitAndStopEditing}\n              >\n              <i className=\"fa fa-check\"></i>\n              </button>\n\n              <button className=\"btn btn-danger btn-lg\"\n                style={{marginRight: '12px'}}\n                onClick={revertAndStopEditing}\n              >\n              <i className=\"fa fa-remove\"></i>\n              </button>\n            </div>\n\n          </div>\n        </div>\n    );\n  }\n}\n\nmodule.exports = NotebookEdit;","const React = require('react');\nconst ReactRedux = require('react-redux');\nconst _ = require('lodash');\nconst createActionDispatchers = require('../helpers/createActionDispatchers');\nconst notebooksActionCreators = require('../reducers/notebooks');\nconst NotebookNew = require('./NotebookNew');\nconst NoteNew = require('./NoteNew');\n\n\n/*This is the Active Notebook class that represents a note which is clicked\n * and is supposed to show it's contents (notes) . If clicked again it will reset\n * the state and make active Notebook Id to -1 through calling the reducer resetNotebook()\n * passed to this component through its parent class, NotebookList.\n * Thus, Turning this Active note into a normal note.\n */\nclass ActiveNotebook extends React.Component {\n\n  //The constructor for using state.\n  constructor(props) {\n\n      super(props);\n\n      //Here we provide the state.\n      this.state={\n\n        //phrase is the search phrase. This is the phrase that is being typed in the search bar.\n        phrase: '',\n        //This stores notes that are not matching the search phrase.\n        tempNotes:'',\n\n      };\n\n  }\n\n  //This is what ActiveNotebook needs to render and what it is supposed to render.\n  render() {\n\n    /* This is the createNote function which takes a note object as a parameter and returns either\n     * an ActiveNote or a simple Note. Active note, similarly like an Active Notebook is supposed\n     * to show its content, it is the resultant of a normal note being clicked, thus, on re-clicking\n     * or actually clicking it will amke the content disappear and turn it into a normal note.\n     * we will explain how below.\n     */\n    const createNote = (note) => {\n\n        /* The decision wether to return an ActiveNote or a normal note happens here.\n         * We store an activeNoteId in the NotebookList state, so it compares a particular note's Id\n         * with the active note Id , and if it turns out to be the active note, we return active note\n         */\n        if(note.id === this.props.activeNoteId) {\n          //We pass key as the note's Id and the note itself along with it's title and content, we also pass in methods to delete and reset a note\n          //resetting a note mean making it into a normal note.\n          return <ActiveNote key={note.id} title={note.title} note={note} resetNote={this.props.resetNote} deleteNote={this.props.deleteNote} content={note.content}/>;\n        }\n        //We pass key as the note's Id and methods to load the note's ocntent and to delete a note\n        //To load a note is basically making the note active and load it's contents.\n        return <Note key={note.id} note={note} loadNoteContent={this.props.loadNoteContent} deleteNote={this.props.deleteNote}/>;\n\n    }\n\n    /*  The function that is called when we click an Active notebook\n     *  The normal notebook have one of it's own.\n     */\n    const onClickNotebook = (event) => {\n\n      event.preventDefault();\n      //This will call the reducer to reset the active notebook back to a normal notebook.\n      this.props.resetNotebook();\n\n    };\n\n    // The fuction which is called when you press the delete button\n    const onDeleteNotebookButtonClick = (event) => {\n\n      //This will pass the notebookId to the action creator in the reducer.\n      this.props.deleteNotebook(this.props.notebook.id);\n\n    };\n\n\n    //This is the function used moostly by the eraser button in the search bar.\n    //other fucntions use it if we want everything back to intital state.\n    const clearInput = () => {\n\n      //It sets the current state to how it looked like initially.\n      this.setState({\n        phrase:'',\n        tempNotes: '',\n      });\n      //It searches an empty string. Thus no results pop up. Just like the initial state.\n      onSearch('');\n\n    };\n\n\n    //This is called when we change the input in the search bar.\n    const onSearching = (event) => {\n\n          //We record the typed text in our constant, phrase\n          const phrase = event.target.value;\n          //We set the state's phrase to out phrase\n          this.setState({phrase});\n          //This further calls out another helper method which does the further procedure.\n          onSearch(phrase);\n\n    };\n\n    //This is the function that is called by the onSearching function.\n    const onSearch = (phrase) => {\n\n        //It creates a temporary array which stores all the notes that are not supposed to be shown in the search results\n        const tempNotes=[];\n\n        //We set the tempNotes in our state to this empty tempNotes.To not to keep on adding stuffs in it.\n        //If we dont do this, on one stage, we wont see anything in the search results.\n        this.setState({tempNotes});\n\n        //For each notes we check if it has what it takes to be in the search results\n        this.props.notes.map(note => {\n\n          //If the tile or the contents of a note have that phrase in it somewehere, we do not push the note\n          //The Empty phrase means initial state or no searching state, where all notes are supposed to be there\n          //Thus, if the phrase id empty string we do not push the note.\n          if(!(note.title.contains(phrase)|| note.content.contains(phrase) || phrase ===''))\n          {\n            tempNotes.push(note);\n          }\n\n        })\n\n        //we finally set the tempNotes in state to be the one we just prepared.\n        this.setState({tempNotes});\n\n   }\n\n\n\n    //The return statement shows what we are supposed to provide\n    //A notebook title, click it and it becomes normal\n    //A delete button\n    //A search bar with an eraser\n    //Add new note button\n    //Search results\n    //We use _.difference to display only the notes which are not in tempNotes, basically we are displayin search results.\n\n    return (\n\n\n      <li className=\"UnorderedListChildNB\">\n\n          <a className=\"activeTextNotebook\" href=\"#\" onClick={onClickNotebook}>\n          {this.props.notebook.title}\n          </a>\n\n          <button className=\"Red-Cross btn btn-danger btn-sm\" onClick={onDeleteNotebookButtonClick}>\n            <i className=\"fa fa-remove\"></i>\n          </button>\n\n          <div>\n\n            <div className=\"input-group\">\n\n                <input\n                  className=\"form-control input-lg\"\n                  value={this.state.phrase}\n                  placeholder=\"Search....\"\n                  onChange={onSearching}\n\n                />\n\n                <div className=\"input-group-btn\">\n\n                    <button\n                      className=\"btn btn-warning btn-lg\"\n                      style={{marginRight: '12px'}}\n                      onClick={clearInput}\n                    >\n                    <i className=\"fa fa-eraser\"></i>\n                    </button>\n\n                </div>\n\n            </div>\n\n            <div className=\"Notes\">\n\n                      <h3>Notes\n                      <NoteNew clearInput={clearInput} createNote ={this.props.createNote} notebookId={this.props.activeNotebookId}/>\n                      </h3>\n\n                      <ol>\n                        { _.difference(this.props.notes,this.state.tempNotes).map(note => createNote(note))}\n                      </ol>\n\n            </div>\n\n          </div>\n\n      </li>\n    );\n  }\n}\n\n//---------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n//ActiveNote, which is the note that is highlighted and displays some content\nclass ActiveNote extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  //The following is what that is going to be rendered and what assisting render\n  render(){\n\n    //This is the function which is executed when a Note is clicked.\n    const onClickNote = (event) => {\n      event.preventDefault();\n      //This is the function that was passed to the Active note, which goes to the reducer and invokes action of reseting a note to it's normal state\n      this.props.resetNote();\n    };\n\n    //This is the function that is going to be invoked when we click the delete button.\n    const onDeleteNoteButtonClick = (event) => {\n      event.preventDefault();\n      //This is the function that was passed to the Active note, which goes to the reducer and invokes action of deleting a note.\n      this.props.deleteNote(this.props.note.id);\n    };\n\n\n    //We return a list element with a clickable title, which on clicking reverts back to normal,\n    //A delete button which deletes the note\n    //And the content of the note.\n    return (\n      <li className=\"UnorderedListChildN\">\n\n        <button className=\"Red-Cross btn btn-danger btn-xs\" onClick={onDeleteNoteButtonClick}>\n          <i className=\"fa fa-remove\"></i>\n        </button>\n\n        <a className=\"activeTextNote\" href=\"#\" onClick={onClickNote}>\n          {this.props.title}    &rArr;\n        </a>\n\n        {this.props.content}\n      </li>\n    );\n  }\n}\n\n//---------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n//The class Note that renders a normal note with ability to being delted and show content\nclass Note extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render(){\n\n    //Fucntion called when note is clicked\n    const onClickNote = (event) => {\n      event.preventDefault();\n      //contents loaded when note clicked, call creating an action.\n      this.props.loadNoteContent(this.props.note.id);\n    };\n\n    //Function called when delete button is clicked\n    const onDeleteNoteButtonClick = (event) => {\n      event.preventDefault();\n      //Note delted, call creating action to delete the note.\n      this.props.deleteNote(this.props.note.id);\n    };\n\n\n    //We return a list element with a delete button and the note title\n    return(\n      <li className=\"UnorderedListChildN\">\n\n        <button className=\"Red-Cross btn btn-danger btn-xs\" onClick={onDeleteNoteButtonClick}>\n          <i className=\"fa fa-remove\"></i>\n        </button>\n\n        <a href=\"#\" onClick={onClickNote}>\n          {this.props.note.title}\n        </a>\n\n      </li>\n\n    );\n  }\n}\n\n//---------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n//The class Notebook, responsible for redering a normal notebook\nclass Notebook extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  //The following is what which will render or assist to render.\n  render() {\n\n    //This is the function which is called when a Notebook title is clicked\n    const onClickNotebook = (event) => {\n      event.preventDefault();\n      //The below function was passed to the notes by NotebookList, it invokes action to load all the notes under this notebook.\n      this.props.loadNotes(this.props.notebook.id);\n    };\n\n    //This is the function which is called when we press the delete button next to notebook.\n    const onDeleteNotebookButtonClick = (event) => {\n      //This will further dispatch an action and delete the notebook hose ID is passed in.\n      this.props.deleteNotebook(this.props.notebook.id);\n    };\n\n    //We return a list element with a title and the delete button\n    return (\n      <li className=\"UnorderedListChildNB\">\n\n          <a href=\"#\" onClick={onClickNotebook}>\n            {this.props.notebook.title}\n          </a>\n\n          <button className=\"Red-Cross btn btn-danger btn-xs\" onClick={onDeleteNotebookButtonClick}>\n            <i className=\"fa fa-remove\"></i>\n          </button>\n\n\n      </li>\n\n    );\n  }\n}\n\n//---------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n//This class is responsible for the search results we get from the search which uses API.\nclass SearchedNote extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render(){\n\n    return (\n      <li className=\"UnorderedListChildN\">\n          {this.props.note.title}   :   {this.props.note.content}\n      </li>\n    );\n  }\n}\n\n//-----------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n//This is the NotebookList class which represents the Notebook List and everything included in it.\nclass NotebookList extends React.Component {\n\n  constructor(props) {\n\n    super(props);\n    //This state has the phrase entered in the main API search bar(lets call it that for short)\n    this.state = {\n      phrase:'',\n    };\n\n  }\n\n  //Following is what that is rendered and assisting in rendering by the notebookList/\n  render() {\n\n    //This is the function which is called the very first by the NotebookList, it fills up our Notebooks\n    const createNotebookListItem = (notebook) => {\n\n      //We have activeNotebookId in the notebook state which represents the clicked notebook\n      //Initially, the value of the activeNotebookId will be -1, so all normal notes will be returned and rendered.\n      if(notebook.id === this.props.notebooks.activeNotebookId) {\n\n        //We have discussed all the parameters the ActiveNotebook requies above.\n        return (\n          <ActiveNotebook\n            key={notebook.id}\n            notebook={notebook}\n            deleteNotebook={this.props.deleteNotebook}\n            notes={this.props.notebooks.notes}\n            loadNotes={this.props.loadNotes}\n            loadNoteContent={this.props.loadNoteContent}\n            activeNoteId={this.props.notebooks.activeNoteId}\n            deleteNote = {this.props.deleteNote}\n            createNote = {this.props.createNote}\n            activeNotebookId ={this.props.notebooks.activeNotebookId}\n            resetNote = {this.props.resetNote}\n            resetNotebook = {this.props.resetNotebook}\n          />\n        );\n      }\n\n      //If not active, its a normal notebook, which just needs fuctions to delete and\n      //fucntion to become active.\n      return (\n          <Notebook\n              key={notebook.id}\n              notebook={notebook}\n              loadNotes={this.props.loadNotes}\n              deleteNotebook={this.props.deleteNotebook}\n          />\n      );\n    };\n\n\n    //This is function which is called when we change/ type something in the input of the search bar\n    const onSearching = (event) => {\n\n        //The constant phrase takes in the text\n        const phrase = event.target.value;\n        //We then set the state to this phrase\n        this.setState({phrase});\n        //We then search for the phrase\n        onSearch(phrase);\n\n    };\n\n    //This is the function that carry out searching\n    const onSearch = (phrase) => {\n\n      //if the phrase is in default state or nothing is typed or everything is erased, then nothing is searched.\n      if(!(phrase===''))\n      {\n        //if there is actually something to search, we search\n        //This will lead to dispatching an action that takes responsibility for searching using an api call.\n        this.props.onSearchNotes(phrase);\n      }\n    };\n\n\n    //This is the function invoked when we press the eraser button\n    const clearInput = () => {\n\n      //This brings back the initial state.\n      this.setState({\n        phrase:'',\n      });\n\n      //We search nothing, like the intial state\n      onSearch('')\n    };\n\n\n    //This is the fuction which will create a notes based on the searchedNotes passed in as props, which came from the api\n    //it calls the SearchedNote component for each note.\n    const createNote = () => {\n      return this.props.notebooks.searchedNotes.map((note) => {\n\n                return <SearchedNote key={note.id} note={note}/>\n\n                })\n    }\n\n    //this is the function which loads notes that were searched\n    const loadSearchedNotes = () => {\n\n      //If the phrase is in initial state or if the eraser button has been presssed then dont search.\n      if(this.state.phrase===\"\" )\n      {\n\n      }\n      //Else search\n      else{\n          //We return A heading for search results and an ordered list of hte searched notes.\n          return(\n                  <div className=\"search\">\n\n                    <p className=\"searchHead\">Search Results</p>\n\n                    <ol>\n                    {\n                      createNote()\n                    }\n                    </ol>\n\n                  </div>\n          )\n        }\n\n    }\n\n\n    //This is the search bar and the results of the search being displayed\n    //we return an input box which takes text and calls the functions we discussed already\n    //we load the search results\n    //We give the option to add new notebooks\n    //We retrun the list of notebooks too\n    return (\n      <div>\n\n        <div className=\"input-group\">\n\n              <input\n                className=\"form-control input-lg\"\n                value={this.state.phrase}\n                placeholder=\"Search....\"\n                onChange={onSearching}\n\n              />\n\n              <div className=\"input-group-btn\">\n\n                  <button\n                    className=\"btn btn-warning btn-lg\"\n                    style={{marginRight: '12px'}}\n                    onClick={clearInput}\n                  >\n                  <i className=\"fa fa-eraser\"></i>\n                  </button>\n\n              </div>\n        </div>\n\n        <div>\n\n          {loadSearchedNotes()}\n\n        </div>\n\n        <h2>Notebooks\n        <NotebookNew\n            createNotebook={this.props.createNotebook}\n          />\n          </h2>\n        <ul className=\"listOfNotebooks\">\n          {this.props.notebooks.notebooks.map(createNotebookListItem)}\n        </ul>\n      </div>\n    );\n  }\n}\n\n//the below function passes the reducer notebook's state to the NotebookList as props\nconst NotebookListContainer = ReactRedux.connect(\n\n  (state) => {\n    return {\n    notebooks: state.notebooks,\n    notes: state.notes,\n    activeNoteId: state.activeNoteId,\n    searchedNotes: state.searchedNotes,\n    };\n  },\n  createActionDispatchers(notebooksActionCreators)\n)(NotebookList);\n\n\n//We export the NotebookListContainer\nmodule.exports = NotebookListContainer;\n","const React = require('react');\nconst NotebookEdit = require('./NotebookEdit');\n\n/**\n * A button that expands  into a form when it is clicked\n */\n\nclass NotebookNew extends React.Component{\n  constructor(props) {\n    super(props);\n    //set the intital interanl state for this ocmpoentne\n    this.state = {editing:false};\n  }\n\n  render() {\n    const openEdit = () => {\n      this.setState({editing: true});\n    };\n\n    const closeEdit = () => {\n      this.setState({editing: false});\n    };\n\n    const createNotebook = (newNotebook) => {\n      this.props.createNotebook(newNotebook, (err) => {\n        if(!err) closeEdit();\n      });\n    };\n\n\n    if(this.state.editing) {\n\n      return (\n        <NotebookEdit\n          notebook = {this.props.notebook}\n          onSave={createNotebook}\n          onCancel={closeEdit}\n        />\n      );\n    }\n\n    return(\n      <button className=\"new-notebook-button btn btn-primary\" onClick={openEdit}>\n        <i className=\"new-notebook-button-plus fa fa-plus\"></i>\n         Notebook\n      </button>\n    );\n  }\n}\n\nmodule.exports = NotebookNew;","/**\n * The root React component from which all other components on the page are\n * descended. It is this component which is directly mounted on the DOM.\n */\n\nconst React = require('react');\nconst ReactRedux = require('react-redux');\n\nconst Provider = ReactRedux.Provider;\nconst Home = require('./Home');\n\n// Enable development tools when in development mode\nlet DevTools = 'span';\nif(process.env.NODE_ENV === 'development') {\n  DevTools = require('./DevTools');\n}\n\n// Define the Root component\nconst Root = props => (\n  /* The Provider gives descendants the ability to connect to the Redux store */\n  <Provider store={props.store}>\n    <div>\n      {/* The Home component contains the guts of the page */}\n      <Home />\n      {/* DevTools is just an empty element when not in development mode */}\n      <DevTools />\n    </div>\n  </Provider>\n);\n\nmodule.exports = Root;\n","/**\n * This helper file provides a set of functions for performing HTTP requests.\n * It will work on both the backend and the frontend.\n */\n\nconst ajax = {};\n\nif(process.env.IN_BROWSER) {\n  ajax.request = opts => new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.addEventListener('error', () => {\n      reject(new Error('Request failed'));\n    });\n    xhr.addEventListener('load', () => {\n      if(xhr.status !== 200) {\n        reject(new Error(`Received status ${xhr.status}`));\n      } else {\n        resolve(opts.json ? JSON.parse(xhr.responseText) : xhr.responseText);\n      }\n    });\n    xhr.open(opts.method, opts.url);\n    if(opts.json) {\n      xhr.setRequestHeader('Content-Type', 'application/json');\n      xhr.send(opts.data !== undefined ? JSON.stringify(opts.data) : opts.data);\n    } else {\n      xhr.send(opts.data);\n    }\n  });\n} else {\n  const request = require('request');\n\n  ajax.request = opts => new Promise((resolve, reject) => {\n    request({\n      url: opts.url,\n      method: opts.method,\n      body: opts.data,\n      json: opts.json\n    }, (error, response, body) => {\n      if(error) {\n        reject(error);\n      } else if(response.statusCode !== 200) {\n        reject(new Error(`Received status ${response.statusCode}`));\n      } else {\n        resolve(body);\n      }\n    });\n  });\n}\n\nmodule.exports = ajax;\n","/**\n * This helper file provides a set of functions for communicating with the\n * backend API. It will work on both the backend and the frontend.\n */\n\nconst ajax = require('./ajax');\n\nconst api = {};\n\nif(process.env.IN_BROWSER) {\n  api.baseUrl = '/api';\n} else {\n  api.baseUrl = 'http://api:3000';\n}\n\napi.get = function(path) {\n  return ajax.request({\n    method: 'GET',\n    url: this.baseUrl + path,\n    json: true\n  });\n};\n\napi.post = function(path, data) {\n  return ajax.request({\n    method: 'POST',\n    url: this.baseUrl + path,\n    json: true,\n    data\n  });\n};\n\napi.put = function(path, data) {\n  return ajax.request({\n    method: 'PUT',\n    url: this.baseUrl + path,\n    json: true,\n    data\n  });\n};\n\napi.delete = function(path) {\n  return ajax.request({\n    method: 'DELETE',\n    url: this.baseUrl + path,\n    json: true\n  });\n};\n\nmodule.exports = api;\n","/**\n * Returns a function that, when given a dispatch function, returns an\n * object containing a bunch of action dispatchers.\n */\nconst createActionDispatchers = (...actionCreatorGroups) => dispatch =>\n  // Iterate over actionCreatorsArray, which is an array of arrays of action\n  // creators\n  actionCreatorGroups.reduce((actionDispatchers, actionCreators) => {\n    // Add an action dispatcher for each action creator in actionCreators\n    Object.keys(actionCreators)\n      .filter((name) => (typeof actionCreators[name] === 'function'))\n      .forEach((name) => {\n        actionDispatchers[name] = function(...actionCreatorArgs) {\n          return dispatch(actionCreators[name].apply(this, actionCreatorArgs));\n        };\n      });\n    return actionDispatchers;\n  }, {});\n\nmodule.exports = createActionDispatchers;\n","/**\n * This helper file provides a function for creating the Redux store. In\n * development mode it will also connect up the Redux development tools for\n * debugging purposes.\n */\n\nconst Redux = require('redux');\nconst reduxThunk = require('redux-thunk').default;\nconst combinedReducers = require('../reducers');\n\nlet finalCreateStore;\n\nif(process.env.NODE_ENV === 'production') {\n  finalCreateStore = Redux.compose(\n    // Enables middleware\n    Redux.applyMiddleware(reduxThunk)\n  )(Redux.createStore);\n} else {\n  const DevTools = require('../components/DevTools');\n\n  finalCreateStore = Redux.compose(\n    // Enables middleware\n    Redux.applyMiddleware(reduxThunk),\n    // Enables DevTools\n    DevTools.instrument()\n  )(Redux.createStore);\n}\n\nmodule.exports = initialState => finalCreateStore(combinedReducers, initialState);\n","/**\n * Specify all of your reducers in this file, so they can be combined into\n * one big reducer.\n */\n\nconst Redux = require('redux');\n\nmodule.exports = Redux.combineReducers({\n  notebooks: require('./notebooks'),\n  /* *** TODO: Put any other reducers in here *** */\n  // eg. `notes: require('./notes')` if you have a reducer in reducers/notes.js\n});\n","const _ = require('lodash');\nconst api = require('../helpers/api');\n\n// Action type constants\n/* *** TODO: Put action constants here *** */\nconst UPDATE = 'myapp/UPDATE';\nconst CREATE = 'myapp/CREATE';\nconst DELETE = 'myapp/DELETE';\nconst SHOW = 'myapp/SHOW';\nconst DELETEN = 'myapp/DELETEN';\nconst CREATEN = 'myapp/CREATEn';\nconst SEARCHED = 'myapp/SEARCHED';\nconst RESETNOTE = 'myapp/RESETNOTE';\nconst RESETNOTEBOOK ='myapp/RESETNOTEBOOK';\n\nconst initialState = {\n  notebooks: [\n    { id: 100, title: 'From Redux Store: A hard-coded notebook' },\n    { id: 101, title: 'From Redux Store: Another hard-coded notebook' },\n  ],\n  activeNotebookId: -1,\n  notes:[],\n  activeNoteId: -1, //Added new Line for note\n  searchedNotes:[],\n};\n\n// Function which takes the current data state and an action,\n// and returns a new state\nfunction reducer(state, action) {\n  state = state || initialState;\n  action = action || {};\n\n  switch(action.type) {\n    /* *** TODO: Put per-action code here *** */\n    case UPDATE: {\n      return Object.assign({}, state, { activeNotebookId:action.notebookId,\n      notes: action.notes, activeNoteId: -1});\n    }\n\n    case RESETNOTE: {\n      return Object.assign({}, state, { activeNoteId: -1});\n    }\n\n    case RESETNOTEBOOK:{\n       return Object.assign({}, state, { activeNotebookId:-1});\n    }\n\n    case CREATE: {\n      const unsortedNotebooks = _.concat(state.notebooks,action.notebook);\n\n      const notebooks = _.orderBy(unsortedNotebooks, 'createdAt', 'desc');\n\n      return _.assign({}, state, {notebooks});\n    }\n    case DELETE: {\n      const newState = _.clone(state);\n      newState.notebooks = _.reject(state.notebooks, {id:action.notebookId});\n      return newState;\n    }\n    case SHOW:{\n      return Object.assign({}, state, {activeNoteId:action.noteId});\n    }\n    case DELETEN:{\n        const newState = _.clone(state)\n        newState.notes = _.reject(state.notes,{id:action.noteId});\n        return newState;\n    }\n    case CREATEN: {\n      const unsortedNotes = _.concat(state.notes, action.note);\n      const notes = _.orderBy(unsortedNotes,'createdAt','desc');\n      return _.assign({},state,{notes});\n    }\n    case SEARCHED: {\n      const searchedNotes = action.notes;\n      const notebooks = action.tempNotebooks;\n      return _.assign({},state,{searchedNotes});\n    }\n    default: return state;\n  }\n}\n\n// Action creators\n/* *** TODO: Put action creators here *** */\nreducer.loadNotes = (notebookId) => {\n  return (dispatch) => {\n    api.get('/notebooks/'+notebookId+'/notes').then((notes) => {\n      dispatch({type: UPDATE, notebookId, notes})\n    })\n  }\n}\n\nreducer.loadNoteContent = (noteId) => {\n  return(dispatch) => {\n    api.get('/notes/'+noteId).then((note) => {\n      dispatch({type:SHOW, noteId})\n    })\n  }\n}\n\nreducer.resetNote = () => {\n  return(dispatch) => {\n    dispatch({type:RESETNOTE})\n  }\n}\n\nreducer.resetNotebook = () => {\n  return(dispatch) => {\n    console.log('calling reset');\n    dispatch({type:RESETNOTEBOOK})\n  }\n}\n\nreducer.deleteNotebook = (notebookId) => {\n  return(dispatch) => {\n    api.delete('/notebooks/'+notebookId).then((notebook)=> {\n      dispatch({type: DELETE, notebookId})\n    })\n  }\n}\n\nreducer.createNotebook = (newNotebook, callback) => {\n  return(dispatch) => {\n    api.post('/notebooks', newNotebook).then((notebook) => {\n      dispatch({type: CREATE, notebook});\n    });\n  }\n}\n\nreducer.createNote = (newNote, callback) => {\n  return(dispatch) => {\n    api.post('/notes',newNote).then((note) => {\n      dispatch({type:CREATEN, note});\n    });\n  }\n}\n\nreducer.deleteNote  =(noteId) => {\n  return(dispatch) => {\n    api.delete('/notes/'+noteId).then((note) => {\n      dispatch({type:DELETEN, noteId})\n    })\n  }\n}\n\n\nreducer.onSearchNotes = (phrase) => {\n  return(dispatch) => {\n    api.get('/search/notes/'+phrase).then((notes) =>{\n\n        const tempNotebooks = []\n\n             notes.map((note) => {\n                api.get('/notebooks/'+note.notebookId).then((notebook) => {\n                  tempNotebooks.push(notebook);\n                })\n                console.log(tempNotebooks)\n            })\n            dispatch({type:SEARCHED, tempNotebooks, notes })\n\n        })\n      }\n    }\n\n\n\n// Export the action creators and reducer\nmodule.exports = reducer;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}